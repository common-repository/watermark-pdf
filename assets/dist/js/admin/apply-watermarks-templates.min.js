/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/js/admin/apply-watermarks-templates.js":
/*!***********************************************************!*\
  !*** ./assets/src/js/admin/apply-watermarks-templates.js ***!
  \***********************************************************/
/***/ (() => {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n(function ($) {\n  \"use strict\";\n\n  var prefix = 'gpls-wmpdf-watermark-pdf';\n  var prefixUnderscored = 'gpls_wmpdf_watermark_pdf';\n  var localize_vars = window[prefixUnderscored + '_localize_vars'];\n  $(document).on('ready', function (e) {\n    new Apply_Watermarks_Template();\n  });\n  var Apply_Watermarks_Template = /*#__PURE__*/function () {\n    function Apply_Watermarks_Template() {\n      _classCallCheck(this, Apply_Watermarks_Template);\n      this.fetchedPosts = [];\n      this.savedPosts = {};\n      this.fetchCPTPostsXHR = null;\n      this.cpts = [];\n      this.posts = [];\n      this.foundImagesPages = 1;\n      this.foundImages = {};\n      this.selectedImagesDirect = [];\n      this.selectedImagesCPTs = [];\n      this.selectedImages = [];\n      this.applyWatermarksTemplateData = {};\n      this.includePDFs = false;\n      this.events();\n      this.initSelect2();\n    }\n    _createClass(Apply_Watermarks_Template, [{\n      key: \"events\",\n      value: function events() {\n        var _this = this;\n        $('.main-loader').hide();\n        $('.main-loader .fetching-data').addClass('d-none');\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        $('.' + localize_vars['classes_prefix'] + '-selected-images-direct-sortable').sortable();\n\n        // Select Watermarks Template.\n        $('#watermarks-template-selection').on('change', function (e) {\n          var $this = $(e.target);\n          var templateID = parseInt($this.val());\n          if (!templateID) {\n            $('.apply-watermarks-template-settings-wrapper .step-2').collapse('hide');\n            _this.applyWatermarksTemplateData['templateID'] = 0;\n          } else {\n            $('.apply-watermarks-template-settings-wrapper .step-2').collapse('show');\n            _this.applyWatermarksTemplateData['templateID'] = templateID;\n          }\n        });\n\n        // Select direct Images.\n        $('.apply-watermarks-template-selection-direct').on('click', function (e) {\n          e.preventDefault();\n          var mediaUploader;\n          var $this = $(e.target);\n          var context = $this.data('context');\n          var options = {\n            title: localize_vars.labels.select_images,\n            library: _defineProperty({\n              orderby: 'date',\n              query: true,\n              post_mime_type: ['application/pdf']\n            }, prefix + '-context-modal', 'create-watermark-template'),\n            button: {\n              text: localize_vars.labels.select_images\n            },\n            multiple: true\n          };\n          mediaUploader = wp.media(options);\n          mediaUploader.open();\n          mediaUploader.on('select', function (e) {\n            var attachments = mediaUploader.state().get('selection').toJSON();\n            // console.log( 'selected attachments', attachments );\n            attachments.forEach(function (attachment) {\n              _this.selectedImagesDirect.push(attachment['id']);\n            });\n            _this.selectedImages = _this.selectedImagesDirect;\n            _this.insertSelectedDirectImages(attachments);\n            $('.step-3').collapse('show');\n          });\n        });\n\n        // Remove Direct Selected Image.\n        $(document).on('click', '.' + localize_vars['classes_prefix'] + '-selected-images-direct .frame-remove', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('.frame-remove')) {\n            $this = $this.parents('.frame-remove');\n          }\n          var attachmentID = $this.data('id');\n          var imgIndex = _this.selectedImagesDirect.indexOf(parseInt(attachmentID));\n          if (imgIndex > -1) {\n            _this.selectedImagesDirect.splice(imgIndex, 1);\n            $this.parents('.img-item').remove();\n            _this.selectedImages = _this.selectedImagesDirect;\n            if (!_this.selectedImages.length) {\n              $('.step-3').collapse('hide');\n            }\n          }\n        });\n\n        // Toggle Apply Watermarks Template Overwrite Options.\n        $(document).on('change', '.apply-watermarks-template-type', function (e) {\n          var $this = $(e.target);\n          var value = $this.val();\n          var originalCheckBox = $('#apply-watermarks-image-sizes-option-original');\n          _this.applyWatermarksTemplateData['applyTemplateType'] = value;\n          if (2 == value) {\n            $('.create-backup-option').collapse('show');\n            $('.image-sizes-options-overwrite').collapse('show');\n            $('.image-sizes-options-new').collapse('hide');\n          } else {\n            $('.create-backup-option').collapse('hide');\n            $('.original-image-size-option').collapse('hide');\n            $('.image-sizes-options-overwrite').collapse('hide');\n            $('.image-sizes-options-new').collapse('show');\n          }\n          if (_this.selectedImages.length) {\n            $('.step-4').collapse('show');\n          }\n        });\n\n        // Toggle Select Images by options content accordion.\n        $('.select-images-by-option').on('change', function (e) {\n          var $this = $(e.target);\n          var selectType = $this.val();\n          _this.applyWatermarksTemplateData['selectImageType'] = selectType;\n          $('#select-images-by-' + selectType).collapse('show').siblings('.select-images-by-option-content').collapse('hide');\n          if ('cpt' === selectType) {\n            _this.selectedImages = _this.selectedImagesCPTs;\n          } else if ('direct' === selectType) {\n            _this.selectedImages = _this.selectedImagesDirect;\n          }\n          if (!_this.selectedImages.length) {\n            $('.step-3').collapse('hide');\n          } else {\n            $('.step-3').collapse('show');\n            $('.step-4').collapse('show');\n          }\n        });\n\n        // Toggle Backup Button.\n        $('.apply-watermarks-create-backup-option').on('change', function (e) {\n          var $this = $(e.target);\n          var value = $this.is(':checked');\n          _this.applyWatermarksTemplateData['createBackup'] = value;\n        });\n\n        // Toggle All Image Sizes Checkboxes.\n        $('.apply-watermarks-image-sizes-options-all').on('change', function (e) {\n          var $this = $(e.target);\n          var value = $this.is(':checked');\n          $('.apply-watermarks-image-sizes-option').prop('checked', value).trigger('change');\n        });\n\n        // Toggle the author required attribute based on checkbox.\n        $('input[name=\"user_mapping_type\"]').on('change', function (e) {\n          if ($('#user-mapping-single-author').prop('checked')) {\n            if ($('#user-mapping-single-author-select').val()) {\n              $('.last-step-submit').prop('disabled', false);\n            } else {\n              $('.last-step-submit').prop('disabled', true);\n            }\n          } else {\n            $('.last-step-submit').prop('disabled', false);\n          }\n        });\n        $('#user-mapping-single-author-select').on('change', function (e) {\n          var $this = $(e.target);\n          if ($this.val()) {\n            $('.last-step-submit').prop('disabled', false);\n          } else {\n            $('.last-step-submit').prop('disabled', true);\n          }\n        });\n\n        // Toggle Select All functionality\n        $('.taxonomy-select-all-checkbox').on('click', function (e) {\n          var $this = $(e.target);\n          var checkSelectInput = $this.parent('label').prev('select');\n          if ($this.prop('checked') == true) {\n            checkSelectInput.find('option').prop('selected', true);\n          } else {\n            checkSelectInput.find('option').prop('selected', false);\n          }\n        });\n        $(document).on('change', '.cpt-terms-select, .cpt-authors-select, .cpt-start-date-select, .cpt-end-date-select, .cpt-statuses-select, .include-pdf', function (e) {\n          _this.foundImages = {};\n        });\n\n        //*********************** Specific Posts  *********************************//\n        $('.select-list-all-tab').on('click', function (e) {\n          var $this = $(e.target);\n          var cpt = $this.data('cpt');\n          var paged = 1;\n          if (!_this.fetchedPosts[cpt] || !_this.fetchedPosts[cpt][paged]) {\n            _this.fetchCPTPost(cpt, paged);\n          }\n        });\n\n        // Handle Pagination //\n\n        // Next Page.\n        $('.all-cpt-posts-pagination .next-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var cpt = $this.data('cpt');\n          var paginationWrapper = $('#all-posts-pagination-' + cpt);\n          var modal = $this.closest('.gpls-all-posts-list-wrapper');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').text());\n          var nextPage = currentPage + 1;\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').text(nextPage);\n          modal.find('.cb-select-all-1').prop('checked', false);\n\n          // get fetched posts from local var if exists otherwise, Fetch paged posts.\n          if (_this.fetchedPosts[cpt] && _this.fetchedPosts[cpt][nextPage]) {\n            _this.updateListPostsTable(cpt, _this.fetchedPosts[cpt][nextPage], true);\n          } else {\n            // Show the Loader.\n            _this.toggleLoader(cpt, 'show');\n            _this.fetchCPTPost(cpt, nextPage);\n          }\n\n          // disable the next-last page buttons if reached end.\n          if (nextPage >= allPages) {\n            paginationWrapper.find('.next-page').addClass('disabled');\n            paginationWrapper.find('.last-page').addClass('disabled');\n          }\n          paginationWrapper.find('.prev-page').removeClass('disabled');\n          paginationWrapper.find('.first-page').removeClass('disabled');\n        });\n\n        // Last Page.\n        $('.all-cpt-posts-pagination .last-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var cpt = $this.data('cpt');\n          var paginationWrapper = $('#all-posts-pagination-' + cpt);\n          var modal = $this.closest('.gpls-all-posts-list-wrapper');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').text());\n          var lastPage = parseInt($this.data('paged'));\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').text(lastPage);\n          modal.find('.cb-select-all-1').prop('checked', false);\n\n          // get fetched posts from local var if exists otherwise, Fetch paged posts.\n          if (_this.fetchedPosts[cpt] && _this.fetchedPosts[cpt][lastPage]) {\n            _this.updateListPostsTable(cpt, _this.fetchedPosts[cpt][lastPage], true);\n          } else {\n            // Show the Loader.\n            _this.toggleLoader(cpt, 'show');\n            _this.fetchCPTPost(cpt, lastPage);\n          }\n\n          // disable the next-last page buttons if reached end.\n          paginationWrapper.find('.next-page').addClass('disabled');\n          paginationWrapper.find('.last-page').addClass('disabled');\n          paginationWrapper.find('.prev-page').removeClass('disabled');\n          paginationWrapper.find('.first-page').removeClass('disabled');\n        });\n\n        // first Page.\n        $('.all-cpt-posts-pagination .first-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var cpt = $this.data('cpt');\n          var paginationWrapper = $('#all-posts-pagination-' + cpt);\n          var modal = $this.closest('.gpls-all-posts-list-wrapper');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').text());\n          var firstPage = 1;\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').text(firstPage);\n          modal.find('.cb-select-all-1').prop('checked', false);\n\n          // get fetched posts from local var if exists otherwise, Fetch paged posts.\n          if (_this.fetchedPosts[cpt] && _this.fetchedPosts[cpt][firstPage]) {\n            _this.updateListPostsTable(cpt, _this.fetchedPosts[cpt][firstPage], true);\n          } else {\n            // Show the Loader.\n            _this.toggleLoader(cpt, 'show');\n            _this.fetchCPTPost(cpt, firstPage);\n          }\n\n          // disable the next-last page buttons if reached end.\n          paginationWrapper.find('.next-page').removeClass('disabled');\n          paginationWrapper.find('.last-page').removeClass('disabled');\n          paginationWrapper.find('.prev-page').addClass('disabled');\n          paginationWrapper.find('.first-page').addClass('disabled');\n        });\n\n        // Prev Page.\n        $('.all-cpt-posts-pagination .prev-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var cpt = $this.data('cpt');\n          var modal = $this.closest('.gpls-all-posts-list-wrapper');\n          var paginationWrapper = $('#all-posts-pagination-' + cpt);\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').text());\n          var prevPage = currentPage - 1;\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').text(prevPage);\n          modal.find('.cb-select-all-1').prop('checked', false);\n\n          // get fetched posts from local var if exists otherwise, Fetch paged posts.\n          if (_this.fetchedPosts[cpt] && _this.fetchedPosts[cpt][prevPage]) {\n            _this.updateListPostsTable(cpt, _this.fetchedPosts[cpt][prevPage], true);\n          } else {\n            // Show the Loader.\n            _this.toggleLoader(cpt, 'show');\n            _this.fetchCPTPost(cpt, prevPage);\n          }\n\n          // disable the next-last page buttons if reached end.\n          if (prevPage <= 1) {\n            paginationWrapper.find('.prev-page').addClass('disabled');\n            paginationWrapper.find('.first-page').addClass('disabled');\n          }\n          paginationWrapper.find('.next-page').removeClass('disabled');\n          paginationWrapper.find('.last-page').removeClass('disabled');\n        });\n\n        // Page Number Box //\n        $('.current-page').on('keypress', function (e) {\n          var keycode = event.keyCode ? event.keyCode : event.which;\n          var $this = $(e.target);\n          var cpt = $this.data('cpt');\n          var paginationWrapper = $('#all-posts-pagination-' + cpt);\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').val());\n          if (keycode == '13') {\n            e.preventDefault();\n            if (currentPage > 0) {\n              if (_this.fetchedPosts[cpt] && _this.fetchedPosts[cpt][currentPage]) {\n                _this.updateListPostsTable(cpt, _this.fetchedPosts[cpt][currentPage], true);\n              } else {\n                // Show the Loader.\n                _this.toggleLoader(cpt, 'show');\n                _this.fetchCPTPost(cpt, currentPage);\n              }\n              paginationWrapper.find('.next-page').removeClass('disabled');\n              paginationWrapper.find('.last-page').removeClass('disabled');\n              paginationWrapper.find('.prev-page').removeClass('disabled');\n              paginationWrapper.find('.first-page').removeClass('disabled');\n\n              // disable the next-last page buttons if reached end.\n              if (currentPage <= 1) {\n                paginationWrapper.find('.prev-page').addClass('disabled');\n                paginationWrapper.find('.first-page').addClass('disabled');\n              } else if (currentPage > allPages) {\n                paginationWrapper.find('.next-page').removeClass('disabled');\n                paginationWrapper.find('.last-page').removeClass('disabled');\n              }\n            } else {\n              if (currentPage > allPages) {\n                paginationWrapper.find('.current-page').val(allPages);\n              } else if (currentPage < 1) {\n                paginationWrapper.find('.current-page').val(1);\n              }\n            }\n          }\n        });\n\n        /********/\n\n        // Toggle Collapse of selected CPT checkbox.\n        $(document).on('change', '.cpt-name-checkbox', function (e) {\n          var $this = $(e.target);\n          var cptSlug = $this.val();\n          var isChecked = $this.is(':checked');\n          var selectFilterWrapper = $('.select-images-by-post-type-' + cptSlug + '-wrapper');\n          if (selectFilterWrapper.length) {\n            selectFilterWrapper.collapse(isChecked ? 'show' : 'hide');\n          }\n          _this.foundImages = {};\n        });\n\n        // Toggle Select Other Option.\n        $(document).on('change', '.cpt-select-type-radio', function (e) {\n          var $this = $(e.target);\n          var parentWrapper = $this.closest('.subtitle');\n          var otherFilter = parentWrapper.find('.cpt-select-type-radio').not($this);\n          $(otherFilter.data('bs-target')).collapse('hide');\n        });\n        $(document).on('change', '.cb-select-all-1', function (e) {\n          var $this = $(e.target);\n          var table = $this.parents('.wp-list-table');\n          var isChecked = $this.is(':checked');\n          $.each(table.find('.cb-select-all'), function (index, element) {\n            $(element).prop('checked', isChecked).trigger('change');\n          });\n        });\n        $(document).on('change', '.gpls-all-posts-list-wrapper .cb-select-all', function (e) {\n          var $this = $(e.target);\n          _this.selectCheckedPost($this);\n          _this.foundImages = {};\n        });\n        $(document).on('change', '#modal-found-images-watermarks-template .cb-select-all', function (e) {\n          var $this = $(e.target);\n          _this.updateSelectedImages($this);\n        });\n\n        // Remove Selected Post when clicking on Delete Button.\n        $(document).on('click', '.remove-selected-post', function (e) {\n          var $this = $(e.target);\n          var postID = parseInt($this.data('id'));\n          var cpt = $this.data('cpt');\n          // remove the ID from the this.savedPosts Array.\n          var postIDIndex = _this.savedPosts[cpt].indexOf(postID);\n          if (postIDIndex > -1) {\n            _this.savedPosts[cpt].splice(postIDIndex, 1);\n          }\n          // Update isChecked status in fetchedPosts list.\n          _this.updateFetchedPostCheckedStatus(cpt, postID, false);\n          // uncheck the checkbox if its on the same current page.\n          var currentRowCheckBox = $('#cb-select-all-' + cpt + '-' + postID);\n          if (currentRowCheckBox.length) {\n            currentRowCheckBox.prop('checked', false);\n          }\n          // remove the post row from the Selected Posts Tab content.\n          $this.parents('.selected-posts-list-row').remove();\n        });\n\n        // On closing the specific posts modal.\n        $('.specific-posts-modal').on('hidden.bs.modal', function (e) {\n          var cpt = $(e.target).data('cpt');\n          var cptSpecificPostsInput = $('.cpt_select_specific_posts_' + cpt);\n          if (_this.savedPosts[cpt]) {\n            cptSpecificPostsInput.val(_this.savedPosts[cpt].join(','));\n          } else {\n            cptSpecificPostsInput.val('');\n          }\n        });\n\n        // Fire All Posts Section on show.\n        $('.specific-posts-modal').on('shown.bs.modal', function (e) {\n          var modalTarget = $(e.currentTarget);\n          modalTarget.find('.select-list-all-tab').trigger('click');\n        });\n\n        // Search For images in selected Posts.\n        $('.search-for-images-in-posts').on('click', function (e) {\n          e.preventDefault();\n          $('.selected-images-watermarks-template-modal').modal('show');\n          if (_this.foundImages[1]) {\n            var paginationWrapper = $('.selected-images-watermarks-template-modal .actions');\n            _this.updateListFoundImages(_this.foundImages[1], paginationWrapper, 1, _this.foundImagesPages, true);\n          } else {\n            _this.findImagesByPosts();\n          }\n        });\n        $('.selected-images-watermarks-template-modal .next-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var paginationWrapper = $('.selected-images-watermarks-template-modal .actions');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').text());\n          var nextPage = currentPage + 1;\n\n          // Fill the Table.\n          if (_this.foundImages[nextPage]) {\n            _this.updateListFoundImages(_this.foundImages[nextPage], paginationWrapper, nextPage, allPages, true);\n          } else {\n            _this.findImagesByPosts(nextPage);\n          }\n        });\n        $('.selected-images-watermarks-template-modal .prev-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var paginationWrapper = $('.selected-images-watermarks-template-modal .all-found-images-pagination');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var currentPage = parseInt(paginationWrapper.find('.current-page').text());\n          var prevPage = currentPage - 1;\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').val(prevPage);\n          if (_this.foundImages[prevPage]) {\n            _this.updateListFoundImages(_this.foundImages[prevPage], paginationWrapper, prevPage, allPages, true);\n          } else {\n            _this.findImagesByPosts(prevPage);\n          }\n        });\n        $('.selected-images-watermarks-template-modal .first-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var paginationWrapper = $('.selected-images-watermarks-template-modal .all-found-images-pagination');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var firstPage = 1;\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').val(firstPage);\n          if (_this.foundImages[firstPage]) {\n            _this.updateListFoundImages(_this.foundImages[firstPage], paginationWrapper, 1, allPages, true);\n          } else {\n            _this.findImagesByPosts(firstPage);\n          }\n        });\n        $('.selected-images-watermarks-template-modal .last-page').on('click', function (e) {\n          var $this = $(e.target);\n          if (!$this.hasClass('button')) {\n            $this = $this.parent();\n          }\n          var paginationWrapper = $('.selected-images-watermarks-template-modal .all-found-images-pagination');\n          var allPages = parseInt(paginationWrapper.find('.total-pages').data('pages'));\n          var lastPage = parseInt($this.data('paged'));\n\n          // Update the current page val.\n          paginationWrapper.find('.current-page').val(lastPage);\n          if (_this.foundImages[lastPage]) {\n            _this.updateListFoundImages(_this.foundImages[lastPage], paginationWrapper, lastPage, allPages, true);\n          } else {\n            _this.findImagesByPosts(lastPage);\n          }\n        });\n        $(document).on('click', '.apply-watermarks-template-submit-btn', function (e) {\n          e.preventDefault();\n          _this.applyWatermarksTemplate();\n        });\n        $(document).on('click', '.wp-list-select-posts-table .toggle-row', function () {\n          $(this).closest('tr').toggleClass('is-expanded');\n        });\n        $(document).on('click', '.close-modal-btn', function (e) {\n          e.preventDefault();\n          var $this = $(e.target);\n          var modal = $this.closest('.bulk-apply-modal');\n          modal.modal('hide');\n        });\n\n        // Toggle include pdfs checkbox.\n        $('.include-pdf').on('change', function (e) {\n          var checkBox = $(e.target);\n          _this.includePDFs = checkBox.is(':checked');\n        });\n      }\n    }, {\n      key: \"initSelect2\",\n      value: function initSelect2() {\n        // Set terms select2.\n        var termsSelects = $('.cpt-terms-select');\n        termsSelects.each(function (index) {\n          var id = $(this).attr('id');\n          var cpt = $(this).data('cpt_type');\n          var taxonomy = $(this).data('tax_name');\n          taxonomyTermsSelect2(id, cpt, taxonomy);\n        });\n      }\n    }, {\n      key: \"insertSelectedDirectImages\",\n      value: function insertSelectedDirectImages(attachments) {\n        // console.log( 'attachments: ', attachments );\n        var sortableWrapper = $('.' + localize_vars['classes_prefix'] + '-selected-images-direct');\n        attachments.forEach(function (attachment) {\n          var imgItem = sortableWrapper.find('.img-item-clone').clone().removeClass('img-item-clone d-none').addClass('img-item');\n          var editLink = attachment.editLink;\n          editLink = new URL(editLink);\n          editLink.searchParams.set(localize_vars['classes_prefix'] + '-force-pdf-refresh', (Math.random() + 1).toString(36).substring(7));\n          imgItem.find('.frame-remove').attr('data-id', attachment['id']);\n          imgItem.find('a').attr('href', editLink.href);\n          imgItem.find('img').attr('src', attachment.sizes.thumbnail ? attachment.sizes.thumbnail.url : attachment.url);\n          sortableWrapper.append(imgItem);\n        });\n      }\n    }, {\n      key: \"setupPagination\",\n      value: function setupPagination(paginationWrapperElement, currentPage, pagesCount) {\n        // First Page.\n        paginationWrapperElement.find('.first-page').data('paged', 1);\n        // Current Page.\n        paginationWrapperElement.find('.current-page').text(currentPage);\n        // Total Pages.\n        paginationWrapperElement.find('.total-pages').data('pages', pagesCount).text(pagesCount);\n        // Next Page.\n        paginationWrapperElement.find('.next-page').data('paged', currentPage + 1);\n        // Last Page.\n        paginationWrapperElement.find('.last-page').data('paged', pagesCount);\n        paginationWrapperElement.find('.next-page').removeClass('disabled');\n        paginationWrapperElement.find('.last-page').removeClass('disabled');\n        paginationWrapperElement.find('.prev-page').removeClass('disabled');\n        paginationWrapperElement.find('.first-page').removeClass('disabled');\n\n        // Prev to first.\n        if (currentPage <= 1) {\n          paginationWrapperElement.find('.prev-page').addClass('disabled');\n          paginationWrapperElement.find('.first-page').addClass('disabled');\n          if (pagesCount <= 1) {\n            paginationWrapperElement.find('.next-page').addClass('disabled');\n            paginationWrapperElement.find('.last-page').addClass('disabled');\n          }\n        }\n        // next to last.\n        if (currentPage >= pagesCount) {\n          paginationWrapperElement.find('.next-page').addClass('disabled');\n          paginationWrapperElement.find('.last-page').addClass('disabled');\n          if (pagesCount <= 1) {\n            paginationWrapperElement.find('.prev-page').addClass('disabled');\n            paginationWrapperElement.find('.first-page').addClass('disabled');\n          }\n        }\n      }\n    }, {\n      key: \"calculatePosition\",\n      value: function calculatePosition(watermarkInfoObj) {\n        var width = watermarkInfoObj['width'];\n        var height = watermarkInfoObj['height'];\n      }\n    }, {\n      key: \"selectCheckedPost\",\n      value: function selectCheckedPost($this) {\n        var cpt = $this.data('cpt');\n        var postRow = $this.parents('.all-posts-list-row');\n        var postID = parseInt($this.data('id'));\n        var postTitle = postRow.find('.column-title strong').text();\n        var postDate = postRow.find('.column-date strong').text();\n        var postData = {\n          id: postID,\n          title: postTitle,\n          date: postDate\n        };\n        this.updateFetchedPostCheckedStatus(cpt, postID, true);\n        if ($this.is(':checked')) {\n          // Add the post ID to the this.savedPosts variable if not exists.\n          if (!this.savedPosts[cpt]) {\n            this.savedPosts[cpt] = [];\n          }\n          if (!this.savedPosts[cpt].includes(postID)) {\n            this.savedPosts[cpt].push(postID);\n            // insert the selected post to the selectedPosts Section.\n            this.insertSelectedPost(cpt, postData);\n          }\n        } else {\n          // remove the ID from the this.savedPosts Array.\n          var postIDIndex = this.savedPosts[cpt].indexOf(postID);\n          if (postIDIndex > -1) {\n            this.savedPosts[cpt].splice(postIDIndex, 1);\n            if (!Object.keys(this.savedPosts[cpt]).length) {\n              delete this.savedPosts[cpt];\n            }\n          }\n          // remove the post row from the Selected Posts Tab content.\n          $('#post-selected-' + postID).remove();\n        }\n        // console.log( 'select checked post: ', this.savedPosts );\n      }\n    }, {\n      key: \"updateFetchedPostCheckedStatus\",\n      value: function updateFetchedPostCheckedStatus(cpt, postID, checkStatus) {\n        for (var paged in this.fetchedPosts[cpt]) {\n          for (var fetchedPostID in this.fetchedPosts[cpt][paged]) {\n            if (fetchedPostID == postID) {\n              this.fetchedPosts[cpt][paged][postID].isChecked = checkStatus;\n            }\n          }\n        }\n      }\n    }, {\n      key: \"updateSelectedImages\",\n      value: function updateSelectedImages($this) {\n        var imageID = parseInt($this.data('id'));\n        if ($this.is(':checked')) {\n          if (!this.selectedImagesCPTs.includes(imageID)) {\n            this.selectedImagesCPTs.push(imageID);\n            this.selectedImages = this.selectedImagesCPTs;\n          }\n        } else {\n          var imageIDIndex = this.selectedImagesCPTs.indexOf(imageID);\n          if (imageIDIndex > -1) {\n            this.selectedImagesCPTs.splice(imageIDIndex, 1);\n            this.selectedImages = this.selectedImagesCPTs;\n          }\n        }\n        if (!this.selectedImages.length) {\n          $('.step-3').collapse('hide');\n        } else {\n          $('.step-3').collapse('show');\n          $('.step-4').collapse('show');\n        }\n      }\n    }, {\n      key: \"updateListFoundImages\",\n      value: function updateListFoundImages(images, actionsRow, currentPage, totalPages) {\n        var _this2 = this;\n        var checkSelected = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        var wrapper = $('.selected-images-watermarks-template-modal');\n        var wrapperBody = wrapper.find('.wp-list-table').find('tbody');\n        wrapperBody.html(images);\n        if (checkSelected) {\n          $.each(wrapper.find('.cb-select-all'), function (index, element) {\n            var $this = $(element);\n            var imageID = parseInt($this.data('id'));\n            if (_this2.selectedImages.includes(imageID)) {\n              $this.prop('checked', true);\n            } else {\n              $this.prop('checked', false);\n            }\n          });\n        }\n        if (images.length) {\n          $('.step-3').collapse('show');\n        } else {\n          $('.step-3').collapse('hide');\n        }\n        this.setupPagination(actionsRow, currentPage, totalPages);\n      }\n    }, {\n      key: \"insertSelectedPost\",\n      value: function insertSelectedPost(cpt, postData) {\n        var selectedPostsTable = $('#selected-posts-' + cpt + ' table tbody');\n        var selectedPostElement = \"<tr class=\\\"iedit selected-posts-list-row\\\" id=\\\"post-selected-\" + postData['id'] + \"\\\" >\\n                    <td class=\\\"title column-title column-primary page-title\\\" data-colname=\\\"Title\\\">\\n                        <strong>\" + postData['title'] + \"</strong>\\n                        <button type=\\\"button\\\" class=\\\"toggle-row\\\"></button>\\n                    </td>\\n                    <td class=\\\"date column-date page-date\\\" data-colname=\\\"Date\\\">\\n                        <strong>\" + postData['date'] + \"</strong>\\n                    </td>\\n                    <td class=\\\"actions column-actions page-actions\\\" data-colname=\\\"Actions\\\">\\n                        <button data-id=\\\"\" + postData['id'] + \"\\\" type=\\\"button\\\" class=\\\"remove-selected-post btn btn-danger\\\" data-cpt=\\\"\" + cpt + \"\\\">Remove</button>\\n                    </td>\\n                </tr>\";\n        selectedPostsTable.append(selectedPostElement);\n      }\n    }, {\n      key: \"fetchCPTPost\",\n      value: function fetchCPTPost(cpt, paged) {\n        var _this3 = this;\n        var allPostsWrapper = $('#all-posts-' + cpt);\n        this.toggleLoader(cpt, 'show');\n        if (this.fetchCPTPostsXHR != null) {\n          this.fetchCPTPostsXHR.abort();\n        }\n        this.fetchCPTPostsXHR = $.ajax({\n          method: 'POST',\n          url: localize_vars.ajaxUrl,\n          data: {\n            action: localize_vars.selectCptListAction,\n            nonce: localize_vars.nonce,\n            cpt: cpt,\n            paged: paged\n          },\n          success: function success(resp) {\n            if (resp['success'] && true == resp['success']) {\n              // Store the results in local variable.\n              if (!_this3.fetchedPosts[cpt]) {\n                _this3.fetchedPosts[cpt] = {};\n              }\n              _this3.fetchedPosts[cpt][paged] = resp['data'];\n\n              // Update the table with the results.\n              _this3.updateListPostsTable(cpt, resp['data']);\n            }\n          },\n          error: function error(err) {\n            if (err.status == 403) {\n              location.reload();\n            }\n          },\n          complete: function complete() {\n            _this3.toggleLoader(cpt, 'hide');\n          }\n        });\n      }\n    }, {\n      key: \"findImagesByPosts\",\n      value: function findImagesByPosts() {\n        var _this4 = this;\n        var paged = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var postTypes = [];\n        var selectType = {};\n        var selectSpecificPosts = {};\n        var cptTerms = {};\n        var cptStatuses = {};\n        var cptAuthors = {};\n        var cptStartDate = {};\n        var cptEndDate = {};\n        $('.cpt-name-checkbox:checked').each(function (index, element) {\n          postTypes.push($(element).val());\n        });\n        $('.cpt-select-type-radio:checked').each(function (index, element) {\n          var key = $(element).data('cpt_type');\n          var value = $(element).val();\n          selectType[key] = value;\n        });\n        $('.cpt_select_specific_posts').each(function (index, element) {\n          var cptCheckBox = $(element).closest('.cpt-name-row').find('.cpt-name-checkbox');\n          if (cptCheckBox.is(':checked')) {\n            var key = $(element).data('cpt_type');\n            var value = $(element).val();\n            selectSpecificPosts[key] = value;\n          }\n        });\n        $('.cpt-terms-select').each(function (index, element) {\n          var key = $(element).data('cpt_type');\n          var tax = $(element).data('tax_name');\n          var value = $(element).val();\n          if (cptTerms[key] == undefined) {\n            cptTerms[key] = {};\n          }\n          cptTerms[key][tax] = value;\n        });\n        $('.cpt-statuses-select').each(function (index, element) {\n          var key = $(element).data('cpt_type');\n          var value = $(element).val();\n          cptStatuses[key] = value;\n        });\n        $('.cpt-authors-select').each(function (index, element) {\n          var key = $(element).data('cpt_type');\n          var value = $(element).val();\n          cptAuthors[key] = value;\n        });\n        $('.cpt-start-date-select').each(function (index, element) {\n          var key = $(element).data('cpt_type');\n          var value = $(element).val();\n          cptStartDate[key] = value;\n        });\n        $('.cpt-end-date-select').each(function (index, element) {\n          var key = $(element).data('cpt_type');\n          var value = $(element).val();\n          cptEndDate[key] = value;\n        });\n        var data = {\n          paged: paged,\n          action: localize_vars.findImagesInPostsAction,\n          nonce: localize_vars.nonce,\n          cpt_name: postTypes,\n          cpt_select_type: selectType,\n          cpt_specific_posts: selectSpecificPosts,\n          cpt_name_terms: cptTerms,\n          cpt_statuses: cptStatuses,\n          cpt_authors: cptAuthors,\n          cpt_start_date: cptStartDate,\n          cpt_end_date: cptEndDate,\n          includePDFs: this.includePDFs\n        };\n        $('.step-4').collapse('hide');\n        this.toggleLoader('found-images', 'show');\n        $.ajax({\n          method: 'POST',\n          url: localize_vars.ajaxUrl,\n          data: data,\n          success: function success(resp) {\n            var _resp$data, _resp$data2;\n            if (!resp.success && resp !== null && resp !== void 0 && (_resp$data = resp.data) !== null && _resp$data !== void 0 && _resp$data.message) {\n              _this4.showToast(resp.data.message, 'bg-' + resp.data.status);\n              $('#modal-found-images-watermarks-template').modal('hide');\n              return;\n            }\n            if (resp !== null && resp !== void 0 && (_resp$data2 = resp.data) !== null && _resp$data2 !== void 0 && _resp$data2.result) {\n              var foundImagesResult = resp['data']['result'];\n              var foundImagesModal = $('#modal-found-images-watermarks-template');\n              var totalItems = foundImagesResult['attachments_count'];\n              var actionsRow = foundImagesModal.find('.actions');\n              var totalPages = Math.ceil(totalItems / 20);\n\n              // 1) Fill in the resulted Images HTML.\n              actionsRow.find('.displaying-num').text(totalItems + ' items');\n              _this4.updateListFoundImages(foundImagesResult['html'], actionsRow, paged, totalPages, false);\n\n              // 2) Store the founded images and store them as selected.\n              var foundImagesIDs = Object.values(foundImagesResult['attachments_ids']).map(function (id) {\n                return parseInt(id);\n              });\n              if (paged === 1) {\n                _this4.selectedImagesCPTs = foundImagesIDs;\n                _this4.selectedImages = foundImagesIDs;\n                _this4.foundImagesPages = totalPages;\n              }\n              _this4.foundImages[paged] = foundImagesResult['html'];\n              if (_this4.applyWatermarksTemplateData['imageSizes'] && _this4.applyWatermarksTemplateData['imageSizes'].length) {\n                $('.step-4').collapse('show');\n              }\n            }\n          },\n          error: function error(err) {\n            // console.log( 'error fetching images: ', err );\n            $('.select-errors-dialog').html(err.responseText).dialog('open');\n          },\n          complete: function complete() {\n            _this4.toggleLoader('found-images', 'hide');\n          }\n        });\n      }\n    }, {\n      key: \"applyWatermarksTemplate\",\n      value: function applyWatermarksTemplate() {\n        var _this5 = this;\n        var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        this.toggleLoader('', 'show', true);\n        var totalSteps = Math.ceil(this.selectedImages.length / parseInt(localize_vars.offsetLength));\n        if (step == 0) {\n          $('.main-loader .loader-progress').val(0);\n          $('.main-loader .loader-progress-num').removeClass('d-none').text('0%');\n        }\n        var data = {\n          action: localize_vars.applyWatermarksTemplateAction,\n          nonce: localize_vars.nonce,\n          images: this.selectedImages,\n          step: step,\n          totalSteps: totalSteps,\n          options: this.applyWatermarksTemplateData\n        };\n        $.ajax({\n          method: 'POST',\n          url: localize_vars.ajaxUrl,\n          data: data,\n          success: function success(resp) {\n            var _resp$data3;\n            if (resp !== null && resp !== void 0 && resp.data && resp !== null && resp !== void 0 && (_resp$data3 = resp.data) !== null && _resp$data3 !== void 0 && _resp$data3.message && resp.data.message.length) {\n              var _resp$data4;\n              _this5.showToast(resp === null || resp === void 0 ? void 0 : (_resp$data4 = resp.data) === null || _resp$data4 === void 0 ? void 0 : _resp$data4.message, 'bg-' + resp.data.status);\n            }\n            if (resp['success'] === false) {\n              _this5.toggleLoader('', 'hide');\n            }\n            if (resp['data']['status'] && resp['success']) {\n              if ('end' === resp['data']['step']) {\n                $('.main-loader .loader-progress').val(100);\n                $('.main-loader .loader-progress-num').text('100%');\n                setTimeout(function () {\n                  _this5.toggleLoader('', 'hide');\n                }, 2000);\n              } else {\n                var progress = Math.round(parseFloat(parseInt(resp['data']['step']) / totalSteps) * 100);\n                $('.main-loader .loader-progress').val(progress);\n                $('.main-loader .loader-progress-num').text(progress + '%');\n                _this5.applyWatermarksTemplate(resp['data']['step']);\n              }\n            }\n          },\n          error: function error(err) {\n            var _err$data;\n            // console.log( 'error:', err );\n            if (err !== null && err !== void 0 && (_err$data = err.data) !== null && _err$data !== void 0 && _err$data.message) {\n              _this5.showToast(err.data.message, 'bg-danger');\n            }\n          }\n        });\n      }\n    }, {\n      key: \"loading\",\n      value: function loading(btn) {\n        var starting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        // All Buttons.\n        if (starting) {\n          btn.addClass('disabled').prop('disabled', true);\n          btn.siblings('.spinner').addClass('is-active');\n        } else {\n          btn.removeClass('disabled').prop('disabled', false);\n          btn.siblings('.spinner').removeClass('is-active disabled');\n        }\n      }\n    }, {\n      key: \"toggleLoader\",\n      value: function toggleLoader() {\n        var cpt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        var action = arguments.length > 1 ? arguments[1] : undefined;\n        var progress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (cpt == '') {\n          var loader = $('.main-loader');\n        } else if (cpt == 'found-images') {\n          var loader = $('.selected-images-watermarks-template-modal').find('.loader');\n        } else {\n          var loader = $('#all-posts-' + cpt).find('.loader');\n        }\n        if ('show' == action) {\n          loader.show();\n        } else if ('hide' == action) {\n          loader.hide();\n        }\n        if (progress) {\n          loader.find('.loader-progress').removeClass('d-none');\n          loader.find('.loader-progress-num').removeClass('d-none');\n        } else {\n          loader.find('.loader-progress').addClass('d-none');\n          loader.find('.loader-progress-num').addClass('d-none');\n        }\n      }\n    }, {\n      key: \"updateListPostsTable\",\n      value: function updateListPostsTable(cpt, posts) {\n        var checkSaved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var wrapper = $('#all-posts-' + cpt);\n        var listPosts = \"<tbody id=\\\"the-list-\" + cpt + \"\\\">\";\n        wrapper.find('.wp-list-table').find('tbody').remove();\n        for (var postID in posts) {\n          var postData = posts[postID];\n          if (this.savedPosts[cpt] && this.savedPosts[cpt].includes(postData.id)) {\n            postData.isChecked = true;\n          } else {\n            postData.isChecked = false;\n          }\n          listPosts += this.fetchedPostRow(cpt, postData);\n        }\n        listPosts += '</tbody';\n        wrapper.find('.wp-list-table').append(listPosts);\n      }\n    }, {\n      key: \"fetchedPostRow\",\n      value: function fetchedPostRow(cpt, post) {\n        var postRow = \"<tr id=\\\"post-\" + post.id + \"\\\" class=\\\"iedit all-posts-list-row\\\">\\n                <th scope=\\\"row\\\" class=\\\"check-column\\\">\\n                    <input \" + (post.isChecked ? 'checked' : '') + \" data-cpt=\\\"\" + cpt + \"\\\" type=\\\"checkbox\\\" class=\\\"cb-select-all cb-select-all-post-\" + cpt + \"\\\" name=\\\"cb-select-all-post-\" + cpt + \"[]\\\" id=\\\"cb-select-all-\" + cpt + \"-\" + post.id + \"\\\" data-id=\\\"\" + post.id + \"\\\">\\n                </th>\\n                <td class=\\\"title column-title column-primary page-title overflow-hidden\\\" data-colname=\\\"Title\\\">\\n                    <strong class=\\\"mt-1\\\"><a href=\\\"\" + post.edit_link + \"\\\" target=\\\"_blank\\\" >\" + post.title + \"</a></strong>\\n                    <button type=\\\"button\\\" class=\\\"toggle-row\\\"></button>\\n                </td>\\n                <td class=\\\"date column-date page-date\\\" data-colname=\\\"Date\\\">\\n                    <strong>\" + post.date + \"</strong>\\n                </td>\\n            </tr>\";\n        return postRow;\n      }\n    }, {\n      key: \"showToast\",\n      value: function showToast(toastMsg) {\n        var bgColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'bg-primary';\n        var is_multiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var toast = $('.' + localize_vars['classes_prefix'] + '-msgs-toast');\n        toast.removeClass(function (index, className) {\n          return (className.match(/(^|\\s)bg-\\S+/g) || []).join(' ');\n        });\n        var html = '';\n        if (!is_multiple) {\n          html = '<p>' + toastMsg + '</p>';\n        } else {\n          html = '<ul class=\"toast-notice-list\">';\n          toastHTML.forEach(function (msg) {\n            html += '<li class=\"notice-item\"><p>' + msg + '</p></li>';\n          });\n          html += '</ul>';\n        }\n        toast.addClass(bgColor).find('.toast-body').html(html);\n        toast.toast('show');\n      }\n    }]);\n    return Apply_Watermarks_Template;\n  }();\n  function taxonomyTermsSelect2(id, cpt, tax) {\n    var target = $('#' + id);\n    if (!target.length) {\n      return;\n    }\n    target.select2({\n      placeholder: localize_vars.labels.search_term,\n      width: '200px',\n      cache: true,\n      multiple: false,\n      allowClear: true,\n      ajax: {\n        method: 'post',\n        url: localize_vars.ajaxUrl,\n        dataType: 'json',\n        delay: 500,\n        data: function data(params) {\n          return {\n            term: params.term,\n            cpt: cpt,\n            tax: tax,\n            action: localize_vars.searchCPTTermsAction\n          };\n        },\n        processResults: function processResults(result) {\n          var options = [];\n          if (result.data.length) {\n            options = result.data;\n          }\n          return {\n            results: options\n          };\n        }\n      },\n      minimumInputLength: 3\n    });\n  }\n})(jQuery);\n\n//# sourceURL=webpack://gpls-sli-wp-screenleap-integration/./assets/src/js/admin/apply-watermarks-templates.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/src/js/admin/apply-watermarks-templates.js"]();
/******/ 	
/******/ })()
;