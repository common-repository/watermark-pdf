/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/js/admin/settings.js":
/*!*****************************************!*\
  !*** ./assets/src/js/admin/settings.js ***!
  \*****************************************/
/***/ (() => {

eval("(function ($) {\n  \"use strict\";\n\n  var prefix = 'gpls-wmpdf-watermark-pdf';\n  var prefixUnderscored = 'gpls_wmpdf_watermark_pdf';\n  var localize_vars = window[prefixUnderscored + '_localize_vars'];\n  var classesPrefix = 'gpls-wmfw';\n  $(document).on('ready', function () {\n    setupFontFileUploader();\n    // Upload custom font file.\n\n    $(document).on('click', '.available-fonts-toggle', function (e) {\n      $('.available-fonts').collapse('toggle');\n    });\n  });\n  function setupFontFileUploader() {\n    $('#custom-fonts-file-wrapper').dmUploader({\n      url: localize_vars.ajaxUrl,\n      extraData: function extraData(id) {\n        return {\n          action: localize_vars.uploadFontFileAction,\n          nonce: localize_vars.nonce\n        };\n      },\n      fieldName: 'file',\n      extFilter: ['ttf'],\n      dataType: 'json',\n      onNewFile: function onNewFile() {\n        resetFontNotice();\n      },\n      onDragEnter: function onDragEnter() {\n        this.addClass('active');\n      },\n      onDragLeave: function onDragLeave() {\n        this.removeClass('active');\n      },\n      onBeforeUpload: function onBeforeUpload(id) {\n        $('.main-loader').removeClass('d-none');\n      },\n      onUploadSuccess: function onUploadSuccess(id, resp) {\n        if (resp.data.result === true && resp.data.fonts) {\n          updateFontsList(resp.data.fonts);\n        }\n        addFontNotice(resp.data.message, resp.data.status);\n      },\n      onUploadError: function onUploadError(id, xhr, status, errorThrown) {\n        addFontNotice(xhr.responseText, 'error');\n      },\n      onUploadComplete: function onUploadComplete(id) {\n        $('.main-loader').addClass('d-none');\n      },\n      onFileTypeError: function onFileTypeError(file) {\n        addFontNotice(localize_vars.labels.only_ttf, 'error');\n      },\n      onFileExtError: function onFileExtError(file) {\n        addFontNotice(localize_vars.labels.only_ttf, 'error');\n      }\n    });\n  }\n\n  /**\r\n   * Upload Custom Fon File.\r\n   */\n  function updateFontsList(fonts) {\n    var fontsList = $('.available-fonts');\n    fontsList.empty();\n    for (var font in fonts) {\n      var fontHTML = '<li class=\"font-item row list-group-item d-flex flex-row\"><div class=\"col-6 font-title\">' + fonts[font].title + '</div><div class=\"col-6 font-file-name\">' + fonts[font].name + '</div></li>';\n      fontsList.append(fontHTML);\n    }\n  }\n  function resetFontNotice() {\n    var notice = $('.custom-font-file-notice');\n    notice.removeAttr('class');\n    notice.addClass('d-none custom-font-file-notice notice');\n  }\n  function addFontNotice(message, type) {\n    resetFontNotice();\n    var notice = $('.custom-font-file-notice');\n    notice.addClass('notice-' + type);\n    notice.removeClass('d-none');\n    notice.find('.notice-message').html(message);\n  }\n})(jQuery);\n\n//# sourceURL=webpack://gpls-sli-wp-screenleap-integration/./assets/src/js/admin/settings.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/src/js/admin/settings.js"]();
/******/ 	
/******/ })()
;